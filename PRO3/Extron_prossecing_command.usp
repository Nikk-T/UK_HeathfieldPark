/*******************************************************************************************
  SIMPL+ Module Information
*******************************************************************************************/
/*
Dealer Name:
System Name:
System Number:
Programmer:Baykov
Comments:
*/

/*******************************************************************************************
  Compiler Directives
*******************************************************************************************/
// #ENABLE_DYNAMIC
#SYMBOL_NAME "Extron_prossecing_command"
// #HINT ""
// #DEFINE_CONSTANT
#CATEGORY "32" // Miscellaneous
// #PRINT_TO_TRACE
// #DIGITAL_EXPAND 
// #ANALOG_SERIAL_EXPAND 
#OUTPUT_SHIFT 70
// #HELP_PDF_FILE ""
#DEFAULT_VOLATILE
#ENABLE_STACK_CHECKING
#ENABLE_TRACE
#ENCODING_INHERIT_FROM_PARENT
// #ENCODING_ASCII
// #ENCODING_UTF16
// #ENCODING_INHERIT_FROM_PROGRAM
/*
#HELP_BEGIN
   (add additional lines of help lines)
#HELP_END
*/

/*******************************************************************************************
  DIGITAL, ANALOG and SERIAL INPUTS and OUTPUTS
*******************************************************************************************/
BUFFER_INPUT _SKIP_, Rx[255], _SKIP_;
DIGITAL_INPUT vol_up[34], _SKIP_;
DIGITAL_INPUT vol_dn[34], _SKIP_;
DIGITAL_INPUT mute_on[34], _SKIP_;
DIGITAL_INPUT mute_off[34,34];
ANALOG_INPUT vol[34,34];

DIGITAL_OUTPUT mute_on_fb[34], _SKIP_;
DIGITAL_OUTPUT mute_off_fb[34,34], _SKIP_;
STRING_OUTPUT Tx, _SKIP_;
ANALOG_OUTPUT vol_fb[34];
ANALOG_OUTPUT _SKIP_,out_fb[48,48];

/*******************************************************************************************
  SOCKETS
  (Uncomment and define socket definitions as needed)
*******************************************************************************************/
// TCP_CLIENT
// TCP_SERVER
// UDP_SOCKET

/*******************************************************************************************
  Parameters
  (Uncomment and declare parameters as needed)
*******************************************************************************************/
// INTEGER_PARAMETER
// SIGNED_INTEGER_PARAMETER
// LONG_INTEGER_PARAMETER
// SIGNED_LONG_INTEGER_PARAMETER
// STRING_PARAMETER

/*******************************************************************************************
  Parameter Properties
  (Uncomment and declare parameter properties as needed)
*******************************************************************************************/
/*
#BEGIN_PARAMETER_PROPERTIES parameter_variable, parameter_variable, ...
   // propValidUnits = // unitString or unitDecimal|unitHex|unitPercent|unitCharacter|unitTime|unitTicks;
   // propDefaultUnit = // unitString, unitDecimal, unitHex, unitPercent, unitCharacter, unitTime or unitTicks;
   // propBounds = lower_bound , upper_bound;
   // propDefaultValue = ;  // or, propDefaultValue = "";
   // propList = // { "value" , "label" } , { "value" , "label" } , ... ;
   // propShortDescription = "status_bar_hint_text";
   // #BEGIN_PROP_FULL_DESCRIPTION  line_1...  line_2...  line_n  #END_PROP_FULL_DESCRIPTION
   // #BEGIN_PROP_NOTES line_1...  line_2...  line_n  #END_PROP_NOTES
#END_PARAMETER_PROPERTIES
*/

/*******************************************************************************************
  Structure Definitions
  (Uncomment and define structure definitions as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: struct.myString = "";
*******************************************************************************************/
/*
STRUCTURE MyStruct1
{
};

MyStruct1 struct;
*/

/*******************************************************************************************
  Global Variables
*******************************************************************************************/
INTEGER mute_status[34];

/*******************************************************************************************
  Functions
  (Add any additional functions here)
  Note:  Functions must be physically placed before the location in
         the code that calls them.
*******************************************************************************************/
integer Proc_Rx;
function Parser()
{
	integer startPosition, endPosition, i;
	string fbString[50];
	if(!Proc_Rx)
	{
		Proc_Rx=1;
		wait(500,wait_Rx)
		{
			trace("Extron: Invalid string");
			Proc_Rx=0;
		 	clearbuffer(Rx);
		}
		while(find("\x0D",Rx))
		{
			fbString=remove(chr(0x0D),Rx);
			
			if(find("Out",fbString))
			{
				startPosition=find("Out",fbString);
				endPosition=find(chr(0x0D),fbString);
				fbString=mid(fbString,startPosition+3,endPosition-startPosition-3);
				if(find("Vol",fbString))
				{
					if(AToI(right(fbString,2))<64)
          {
						vol_fb[AToI(left(fbString,2))]=AToI(right(fbString,2))*1024;
					}
					else
          {
						vol_fb[AToI(left(fbString,2))]=0xFFFF;
					}
				}
				if(find("In",fbString))
				{
					if(find("Aud",fbString))
					{
						out_fb[AToI(left(fbString,2))]=AToI(right(left(fbString,7),2));
					}
				}
			}
			if(find("Amt",fbString))
			{
				startPosition=find("Amt",fbString);
				fbString=mid(fbString,startPosition+3,4);
				i=AToI(left(fbString,2));
				switch(AToI(right(fbString,1)))
				{
					case(1): { mute_on_fb[i]=1; mute_off_fb[i]=0; }
					case(0): { mute_on_fb[i]=0; mute_off_fb[i]=1; }
				}
			}
		}
		Proc_Rx=0;
		clearbuffer(Rx);
		cancelwait(wait_Rx);
	}
}

/*******************************************************************************************
  Event Handlers
*******************************************************************************************/
CHANGE vol
{
	if(mute_on_fb[GetLastModifiedArrayIndex()]) 
	{
		Tx = "Amt"+itoa(GetLastModifiedArrayIndex())+"*0Z";
		ProcessLogic();
	}
  Tx = itoa(GetLastModifiedArrayIndex())+"*"+itoa(vol[GetLastModifiedArrayIndex()]/1024)+"v";
}

CHANGE Rx
{
	if(find("\x0D", Rx))	Parser();
}

PUSH vol_up
{
	if(mute_on_fb[GetLastModifiedArrayIndex()]) 
	{
		Tx = "Amt"+itoa(GetLastModifiedArrayIndex())+"*0Z";
		ProcessLogic();
	}
  Tx = itoa(GetLastModifiedArrayIndex())+"+"+"v";
}

PUSH vol_dn
{
	if(mute_on_fb[GetLastModifiedArrayIndex()]) 
	{
		Tx = "Amt"+itoa(GetLastModifiedArrayIndex())+"*0Z";
		ProcessLogic();
	}
  Tx = itoa(GetLastModifiedArrayIndex())+"-"+"v";
}
/*
PUSH mute
{
	if(mute_status[GetLastModifiedArrayIndex()]) Tx = "Amt"+itoa(GetLastModifiedArrayIndex())+"*0Z";
	else Tx = "Amt"+itoa(GetLastModifiedArrayIndex())+"*1Z";
}
*/
PUSH mute_on
{
	Tx = "Amt"+itoa(GetLastModifiedArrayIndex())+"*1Z";
}

PUSH mute_off
{
	Tx = "Amt"+itoa(GetLastModifiedArrayIndex())+"*0Z";
}

/*******************************************************************************************
  Main()
*******************************************************************************************/
Function Main()
{
	integer i;
	WaitForInitializationComplete();
	for(i=1 to 34)
	{
		mute_status[i]=0;
	}
}

