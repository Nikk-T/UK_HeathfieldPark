/*******************************************************************************************
  SIMPL+ Module Information
  (Fill in comments below)
*******************************************************************************************/
/*
Dealer Name:
System Name:  ClipsalProcString
System Number:
Programmer:	Baykov
Comments:
*/

/*******************************************************************************************
  Compiler Directives
  (Uncomment and declare compiler directives as needed)
*******************************************************************************************/
// #ENABLE_DYNAMIC
#SYMBOL_NAME "ClipsalString_Value"
// #HINT ""
// #DEFINE_CONSTANT
// #CATEGORY "" 
// #PRINT_TO_TRACE
// #DIGITAL_EXPAND 
// #ANALOG_SERIAL_EXPAND 
#OUTPUT_SHIFT 3
// #HELP_PDF_FILE ""
#DEFAULT_VOLATILE
#ENABLE_STACK_CHECKING
#ENABLE_TRACE
#ENCODING_ASCII
// #ENCODING_UTF16
// #ENCODING_INHERIT_FROM_PARENT
// #ENCODING_INHERIT_FROM_PROGRAM

#HELP_BEGIN
   No help available
#HELP_END

#DEFINE_CONSTANT signalPulse 50
/*******************************************************************************************
  Include Libraries
  (Uncomment and include additional libraries as needed)
*******************************************************************************************/
// #CRESTRON_LIBRARY ""
// #USER_LIBRARY ""

/*******************************************************************************************
  DIGITAL, ANALOG and SERIAL INPUTS and OUTPUTS
  (Uncomment and declare inputs and outputs as needed)
*******************************************************************************************/
ANALOG_INPUT _SKIP_,_SKIP_,_SKIP_,value,_SKIP_;
// STRING_INPUT 
BUFFER_INPUT from_clipsal[200];
ANALOG_OUTPUT value_fb,_SKIP_; 
STRING_OUTPUT to_clipsal;

/*******************************************************************************************
  SOCKETS
  (Uncomment and define socket definitions as needed)
*******************************************************************************************/
// TCP_CLIENT
// TCP_SERVER
// UDP_SOCKET

/*******************************************************************************************
  Parameters
  (Uncomment and declare parameters as needed)
*******************************************************************************************/
INTEGER_PARAMETER application, adr_group, speed;
// SIGNED_INTEGER_PARAMETER
// LONG_INTEGER_PARAMETER
// SIGNED_LONG_INTEGER_PARAMETER
// STRING_PARAMETER

/*******************************************************************************************
  Parameter Properties
  (Uncomment and declare parameter properties as needed)
*******************************************************************************************/
#BEGIN_PARAMETER_PROPERTIES application, adr_group, speed
	propValidUnits = unitHex;
	propDefaultUnit = unitHex;
   // propBounds = lower_bound , upper_bound;
   // propDefaultValue = ;  // or, propDefaultValue = "";
   // propList = // { "value" , "label" } , { "value" , "label" } , ... ;
   // propShortDescription = "status_bar_hint_text";
   // #BEGIN_PROP_FULL_DESCRIPTION  line_1...  line_2...  line_n  #END_PROP_FULL_DESCRIPTION
   // #BEGIN_PROP_NOTES line_1...  line_2...  line_n  #END_PROP_NOTES
#END_PARAMETER_PROPERTIES


/*******************************************************************************************
  Structure Definitions
  (Uncomment and define structure definitions as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: struct.myString = "";
*******************************************************************************************/
/*
STRUCTURE MyStruct1
{
};

MyStruct1 struct;
*/

/*******************************************************************************************
  Global Variables
  (Uncomment and declare global variables as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: myString = "";
*******************************************************************************************/
// INTEGER
// LONG_INTEGER
// SIGNED_INTEGER
// SIGNED_LONG_INTEGER
// STRING

/*******************************************************************************************
  Functions
  (Add any additional functions here)
  Note:  Functions must be physically placed before the location in
         the code that calls them.
*******************************************************************************************/
integer_Function Calc_CRC(integer yy)
{
	integer sum, CRC;
	sum=0x05 + application + speed + adr_group + yy;
//	trace("Clipsal: sum=%x, mod=%x",sum, sum mod 0x100);
	if((sum mod 0x100)=0) CRC=0;
	else CRC=(0x100 - (sum mod 0x100));
	return(CRC);
}

string_Function ConvertHex(integer yy)
{
	string hex[2];
	if(yy<0x10)
   	hex="0"+IToHex(yy);
	else
		hex=IToHex(yy);
	Return (hex);
}

integer Proc_Rx;
function Parser()
{
	integer startPosition, endPosition;
	string fbString[50], temp[2];
	if(!Proc_Rx)
	{
		Proc_Rx=1;
		wait(500,wait_Rx)
		{
			trace("Clipsal: Invalid string");
			Proc_Rx=0;
		 	clearbuffer(from_clipsal);
		}
		startPosition=find("05",from_clipsal);
		endPosition=find(chr(0x0D),from_clipsal);
		if(startPosition>0 && endPosition>0)
		{
			fbString=mid(from_clipsal,startPosition+4,endPosition-startPosition-6);
			if(HexToI(removebylength(2,fbString))=application)
			{
				switch(HexToI(removebylength(2,fbString)))
				{
					case(0x01):	temp=removebylength(2,fbString);
				}
				//Analize bytes value
				switch(HexToI(removebylength(2,fbString)))
				{
					case(0x79): //bool = true
					{
						if(HexToI(removebylength(2,fbString))=adr_group) value_fb=0xFF; 
					}
					case(0x01): //bool = false
					{
						if(HexToI(removebylength(2,fbString))=adr_group) value_fb=0x00; 
					}
					case(0x02): //value	
					{
						if(HexToI(removebylength(2,fbString))=adr_group) value_fb=HexToI(removebylength(2,fbString)); 
					}
				}				
			}
		}
		else
		{
			trace("Clipsal: Incorrect string");
		}
		Proc_Rx=0;
		clearbuffer(from_clipsal);
		cancelwait(wait_Rx);
	}
}

/*******************************************************************************************
  Event Handlers
  (Uncomment and declare additional event handlers as needed)
*******************************************************************************************/
CHANGE value
{
	// make command to Clipsal
	string cmd[20];
  cmd = "\\05"+ConvertHex(application)+"00"+ConvertHex(speed)+ConvertHex(adr_group)+ConvertHex(value)+ConvertHex(Calc_CRC(value))+"\r";
	//send command to port
	to_Clipsal = cmd;
}

CHANGE from_clipsal
{
	if(find(chr(0x0D),from_clipsal))
	{
		Parser();
	}
}

/*
EVENT
{
    // TODO:  Add code here
}
*/

/*
SOCKETCONNECT
{
    // TODO:  Add code here
}
*/

/*
SOCKETDISCONNECT
{
    // TODO:  Add code here
}
*/

/*
SOCKETRECEIVE
{
    // TODO:  Add code here
}
*/

/*
SOCKETSTATUS
{
    // TODO:  Add code here
}
*/

/*******************************************************************************************
  Main()
  Uncomment and place one-time startup code here
  (This code will get called when the system starts up)
*******************************************************************************************/
Function Main()
{

    // WaitForInitializationComplete();
    // If you are reading any Input or Output variables, uncomment
    //   the WaitForInitializationComplete statement above and read
    //   them afterwards.  Input/Output variables will not have
    //   their correct values set until after the logic processor
    //   runs and propagates the values to them.
}

